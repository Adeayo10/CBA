using CBA.Context;
using CBA.Models;
using Microsoft.EntityFrameworkCore;

namespace CBA.Services;
public class LedgerService : ILedgerService
{
    private readonly UserDataContext _context;

    public LedgerService(UserDataContext context)
    {
        _context = context;

    }
    public async Task<LedgerResponse> AddGLAccount(LedgerRequestDTO ledgerRequestDTO)
    {
        var autoGeneratedAccountNumber = await GenerateAccountNumber(ledgerRequestDTO.AccountCategory!);

        var isGLAccountExist = await IsGLAccountExist(autoGeneratedAccountNumber, ledgerRequestDTO.AccountName!);
        if (isGLAccountExist)
        {
            return new LedgerResponse()
            {
                Message = "Account already exist",
                Status = false
            };
        }
        var glAccount = new GLAccounts()
        {
            AccountName = ledgerRequestDTO.AccountName,
            AccountNumber = autoGeneratedAccountNumber,
            AccountCategory = ledgerRequestDTO.AccountCategory,
            AccountDescription = ledgerRequestDTO.AccountDescription,
            AccountStatus = default
        };

        await _context.GLAccounts.AddAsync(glAccount);
        await _context.SaveChangesAsync();
        return new LedgerResponse()
        {
            Message = "Account created successfully",
            Status = true
        };
    }
    public async Task<LedgerResponse> GetGlAccount()
    {
        var glAccount = await _context.GLAccounts.ToListAsync();
        if (glAccount == null)
        {
            return new LedgerResponse()
            {
                Message = "No account found",
                Status = false
            };
        }
        var mappedData = new LedgerData();
        foreach (var account in glAccount)
        {
            mappedData.AccountName = account.AccountName;
            mappedData.AccountNumber = account.AccountNumber;
            mappedData.AccountCategory = account.AccountCategory;
            mappedData.AccountDescription = account.AccountDescription;
            mappedData.AccountStatus = account.AccountStatus;
        }
        return new LedgerResponse()
        {
            Message = "Account found",
            Status = true,
            Data = mappedData
        };
    }
    public async Task<LedgerResponse> UpdateGLAccount(LedgerRequestDTO ledgerRequestDTO)
    {
        var glAccount = await _context.GLAccounts.FirstOrDefaultAsync(X => X.Id == ledgerRequestDTO.Id);
        if (glAccount == null)
        {
            return new LedgerResponse()
            {
                Message = "Account does not exist",
                Status = false
            };
        }
        glAccount.AccountName = ledgerRequestDTO.AccountName;
        glAccount.AccountDescription = ledgerRequestDTO.AccountDescription;
        glAccount.AccountCategory = ledgerRequestDTO.AccountCategory;

        //_context.GLAccounts.Update(glAccount);
        await _context.SaveChangesAsync();
        return new LedgerResponse()
        {
            Message = "Account updated successfully",
            Status = true
        };
    }

    private async Task<string> GenerateAccountNumber(string category)
    {
        var totalRowCount = await _context.GLAccounts.CountAsync(x => x.AccountCategory == category);
        category = category switch
        {
            "Asset" => "1",
            "Liability" => "2",
            "Capital" => "3",
            "Income" => "4",
            "Expense" => "5",
            _ => "0",
        };
        var accountNumber = string.Format("{0}{1}", $"{category}", $"{totalRowCount + 1}".PadLeft(4, '0'));

        return accountNumber;
    }

    private async Task<bool> IsGLAccountExist(string accountNumber, string accountName)
    {
        var isGLAccountExist = await _context.GLAccounts.AnyAsync(x => x.AccountNumber == accountNumber.ToLower() || x.AccountName == accountName);
        return isGLAccountExist;
    }

}