using CBA.Context;
using CBA.Models;
using Microsoft.EntityFrameworkCore;

namespace CBA.Services;
public class LedgerService : ILedgerService
{
    private readonly UserDataContext _context;
    private readonly ILogger<LedgerService> _logger;
    public LedgerService(UserDataContext context, ILogger<LedgerService> logger)
    {
        _context = context;
        _logger = logger;
    }
    public async Task<LedgerResponse> AddGLAccount(LedgerRequestDTO ledgerRequestDTO)
    {
        var autoGeneratedAccountNumber = await GenerateAccountNumber(ledgerRequestDTO.AccountCategory!);

        var isGLAccountExist = await IsGLAccountExist(autoGeneratedAccountNumber, ledgerRequestDTO.AccountName!);
        if (isGLAccountExist)
        {
            return new LedgerResponse()
            {
                Message = "Account already exist",
                Status = false
            };
        }
        var glAccount = await CreateGLAccountEntity(ledgerRequestDTO, autoGeneratedAccountNumber);
        await _context.GLAccounts.AddAsync(glAccount);
        await _context.SaveChangesAsync();
        return new LedgerResponse()
        {
            Message = "Account created successfully",
            Status = true
        };
    }
    private static Task<GLAccounts> CreateGLAccountEntity(LedgerRequestDTO ledgerRequestDTO, string autoGeneratedAccountNumber)
    {
        var glAccount = new GLAccounts()
        {
            AccountName = ledgerRequestDTO.AccountName,
            AccountNumber = autoGeneratedAccountNumber,
            AccountCategory = ledgerRequestDTO.AccountCategory,
            AccountDescription = ledgerRequestDTO.AccountDescription,
            Balance = 0,
            AccountStatus = default,
            TransactionDate = DateTime.Now
        };
        return Task.FromResult(glAccount);
    }
    public async Task<LedgerResponse> GetGlAccount()
    {
        var glAccount = await _context.GLAccounts.ToListAsync();
        if (glAccount == null)
        {
            return new LedgerResponse()
            {
                Message = "No account found",
                Status = false
            };
        }
        var mappedData = new LedgerData();
        foreach (var account in glAccount)
        {
            mappedData.AccountName = account.AccountName;
            mappedData.AccountNumber = account.AccountNumber;
            mappedData.AccountCategory = account.AccountCategory;
            mappedData.AccountDescription = account.AccountDescription;
            mappedData.AccountStatus = account.AccountStatus;
        }
        return new LedgerResponse()
        {
            Message = "Account found",
            Status = true,
            Data = mappedData
        };
    }
    public async Task<LedgerResponse> UpdateGLAccount(LedgerRequestDTO ledgerRequestDTO)
    {
        var glAccount = await _context.GLAccounts.FirstOrDefaultAsync(X => X.Id == ledgerRequestDTO.Id);
        if (glAccount == null)
        {
            return new LedgerResponse()
            {
                Message = "Account does not exist",
                Status = false
            };
        }
        glAccount.AccountName = ledgerRequestDTO.AccountName;
        glAccount.AccountDescription = ledgerRequestDTO.AccountDescription;
        glAccount.AccountCategory = ledgerRequestDTO.AccountCategory;

        //_context.GLAccounts.Update(glAccount);
        await _context.SaveChangesAsync();
        return new LedgerResponse()
        {
            Message = "Account updated successfully",
            Status = true
        };
    }

    private async Task<string> GenerateAccountNumber(string category)
    {
        var totalRowCount = await _context.GLAccounts.CountAsync(x => x.AccountCategory == category);
        category = category switch
        {
            "Asset" => "1",
            "Liability" => "2",
            "Capital" => "3",
            "Income" => "4",
            "Expense" => "5",
            _ => "0",
        };
        var accountNumber = string.Format("{0}{1}", $"{category}", $"{totalRowCount + 1}".PadLeft(4, '0'));

        return accountNumber;
    }

    private async Task<bool> IsGLAccountExist(string accountNumber, string accountName)
    {
        var isGLAccountExist = await _context.GLAccounts.AnyAsync(x => x.AccountNumber == accountNumber || x.AccountName == accountName.ToLower());
        return isGLAccountExist;
    }
    public Task<decimal> GetMostRecentLedgerEnteryBalance()
    {
        var LedgerBalance = _context.GLAccounts.Where(x => x.AccountCategory == "Assets").OrderByDescending(x => x.TransactionDate).FirstOrDefault()!.Balance;
        return Task.FromResult(LedgerBalance);
    }
    public async Task<LedgerResponse> ChangeAccountStatus(int id)
    {
        var glAccount = await _context.GLAccounts.FirstOrDefaultAsync(x => x.Id == id);
        if (glAccount == null)
        {
            return new LedgerResponse()
            {
                Message = "Account does not exist",
                Status = false
            };
        }
        glAccount.AccountStatus = glAccount.AccountStatus == "Active" ? "Inactive" : "Active";
        await _context.SaveChangesAsync();
        return new LedgerResponse()
        {
            Message = "Account status changed successfully",
            Status = true
        };
    }
    public async Task<CustomerResponse> LinkUserToGLAccount(UserLedgerDto userLedger)
    {
        var user = await _context.Users.FindAsync(userLedger.Userid);
        if (user is null)
        {
            _logger.LogInformation("User not found");
            return new CustomerResponse
            {
                Message = "User not found",
                Status = false,
                Errors = new List<string> { "User not found" }
            };
        }
        var glAccount = await _context.GLAccounts.FindAsync(userLedger.GLAccountid);
        if (glAccount is null)
        {
            _logger.LogInformation("GLAccount not found");
            return new CustomerResponse
            {
                Message = "GLAccount not found",
                Status = false,
                Errors = new List<string> { "GLAccount not found" }
            };
        }
        _logger.LogInformation("Linking user to GLAccount");
        var userLedgerEntity = new UserLedger
        {
            UserId = user.Id,
            LedgerId = glAccount.Id.ToString(),
            UserName = user.UserName,
            AccountName = glAccount.AccountName,
            AccountCategory = glAccount.AccountCategory,
            AccountNumber = glAccount.AccountNumber
        };
        await _context.UserLedger.AddAsync(userLedgerEntity);
        await _context.SaveChangesAsync();
        _logger.LogInformation("Linking successful");
        return new CustomerResponse
        {
            Message = "Linking successful",
            Status = true
        };

    }
    public async Task<CustomerResponse> UnLinkUserToGLAccount(UserLedgerDto userLedger)
    {
        var user = await _context.Users.FindAsync(userLedger.Userid);
        if (user is null)
        {
            _logger.LogInformation("User not found");
            return new CustomerResponse
            {
                Message = "User not found",
                Status = false,
                Errors = new List<string> { "User not found" }
            };
        }
        var glAccount = await _context.GLAccounts.FindAsync(userLedger.GLAccountid);
        if (glAccount is null)
        {
            _logger.LogInformation("GLAccount not found");
            return new CustomerResponse
            {
                Message = "GLAccount not found",
                Status = false,
                Errors = new List<string> { "GLAccount not found" }
            };
        }
        _logger.LogInformation("UnLinking user to GLAccount");
        var userLedgerEntity = await _context.UserLedger.FirstOrDefaultAsync(x => x.UserId == user.Id && x.LedgerId == glAccount.Id.ToString());
        if (userLedgerEntity is null)
        {
            _logger.LogInformation("User not linked to GLAccount");
            return new CustomerResponse
            {
                Message = "User not linked to GLAccount",
                Status = false,
                Errors = new List<string> { "User not linked to GLAccount" }
            };
        }
        _context.UserLedger.Remove(userLedgerEntity);
        await _context.SaveChangesAsync();
        _logger.LogInformation("UnLinking successful");
        return new CustomerResponse
        {
            Message = "UnLinking successful",
            Status = true
        };
    }
    public async Task<LedgerResponse> ViewLedgerAccountBalance(string accountNumber)
    {
        var glAccount = await _context.GLAccounts.FirstOrDefaultAsync(x => x.AccountNumber == accountNumber);
        if (glAccount is null)
        {
            _logger.LogInformation("Account not found");
            return new LedgerResponse
            {
                Message = "Account not found",
                Status = false
            };
        }
        var mappedData = new LedgerData
        {
            AccountName = glAccount.AccountName,
            AccountNumber = glAccount.AccountNumber,
            AccountCategory = glAccount.AccountCategory,
            AccountDescription = glAccount.AccountDescription,
            AccountStatus = glAccount.AccountStatus,
            Balance = glAccount.Balance
        };
        _logger.LogInformation("Account found");
        return new LedgerResponse
        {
            Message = "Account found",
            Status = true,
            Data = mappedData
        };
    }
    
    /*public async Task<decimal> CalculateLedgerAccountBalance()
    {
        var glAccount = await _context.GLAccounts.ToListAsync();
        decimal totalBalance = 0;
        foreach (var account in glAccount)
        {
            totalBalance += account.Balance;
        }
        return totalBalance;
    }*/

}